<?php

namespace LyonIsWildBundle\Repository;

/**
 * PlaceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PlaceRepository extends \Doctrine\ORM\EntityRepository
{
    public function getParcoursPatrimoineCulturel(){

        $query = $this->createQueryBuilder('p')
            ->where('p.type = :type')
            ->setParameter('type', 'PATRIMOINE_CULTUREL')
            ->andWhere('p.price between 5 and 10')
            ->orderBy('p.price', 'DESC')
            ->andWhere('p.postal = 69005')
            ->setMaxResults(3)


            ->getQuery();

        return $query->getResult();
    }

    public function getParcoursRestaurations(){

        $query = $this->createQueryBuilder('p')
            ->where('p.type = :type')
            ->setParameter('type', "RESTAURATION")
            ->andWhere('p.price between 10 and 30')
            ->orderBy('p.price', 'DESC')
            ->andWhere('p.postal = 69003')
            ->setMaxResults(3)


            ->getQuery();

        return $query->getResult();
    }

    public function getParcoursEquipements(){

        $query = $this->createQueryBuilder('p')
            ->where('p.type = :type')
            ->setParameter('type', "EQUIPEMENTS")
            ->andWhere('p.price between 0 and 20')
            ->orderBy('p.price', 'DESC')


            ->getQuery();

        return $query->getResult();
    }

    public function getParcoursRestaurationsLuxe(){

        $query = $this->createQueryBuilder('p')
            ->where('p.type = :type')
            ->setParameter('type', "RESTAURATION")
            ->andWhere('p.price between 50 and 200')
            ->orderBy('p.price', 'DESC')
            ->setMaxResults(3)


            ->getQuery();

        return $query->getResult();
    }

    public function getParcoursAleatoire(){

    	$count = $this->createQueryBuilder('p')
			->select('COUNT(p)')
			->getQuery()
			->getSingleScalarResult();
		$query = $this->createQueryBuilder('p')
			->setFirstResult(rand(0, $count - 3))
			->setMaxResults(3)
			->getQuery();


		return $query->getResult();


	}
}
